apiVersion: v1
kind: Template
labels:
  template: pink-coffee-dev-build
metadata:
  annotations:
    description: Sakuli proof of concept for circ it
    tags: consol, sakuli2, custom-image, s2i, source-to-image
  name: pink-coffee-dev-build
parameters:

  - description: Namespace of the project
    name: NAMESPACE
    required: true

  - description: Name for the target image of the build.
    name: IMAGE
    value: sakuli-dashboard-test

  - description: Image tag of the target image.
    name: IMAGE_TAG
    value: latest

  - description: Sakuli2 License key.
    name: SAKULI_LICENSE_KEY
    required: true
    value: ${SAKULI_LICENSE_KEY}

  - description: Git source URL containing the test suite.
    name: TESTSUITE_REPOSITORY_URL
    value: git@github.com:sakuli/pink-coffee.git

  - description: Git branch/tag reference.
    name: TESTSUITE_REPOSITORY_REF
    value: "develop"

  - description: Source folder where the test suite is located.
    name: TESTSUITE_CONTEXT_DIR
    value: "sakuli/cm-demo"

  - description: Secret to access the testsuite repository.
    name: TESTSUITE_REPOSITORY_SECRET
    value: ${TESTSUITE_REPOSITORY_SECRET}
    required: true

  - description: Kind of source to obtain the builder image from.
    name: BUILDER_IMAGE_KIND
    value: ImageStreamTag

  - description: Name of the builder image.
    name: BUILDER_IMAGE
    value: sakuli-s2i-remote-connection

  - description: Tag of the builder image to use.
    name: BUILDER_IMAGE_TAG
    value: 2.4.0-2

  - description: Service account login token
    name: LOGIN_TOKEN
    required: true

  - description: Name of the cluster
    name: CLUSTER_NAME
    required: true

  - description: Address of the cluster
    name: CLUSTER_SERVER
    required: true

objects:

  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: pushgateway
      name: pushgateway
    spec:
      ports:
        - name: 9091-tcp
          port: 9091
          protocol: TCP
          targetPort: 9091
      selector:
        app: pushgateway
        deploymentconfig: pushgateway
      sessionAffinity: None
      type: ClusterIP

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: pushgateway
      name: pushgateway
    spec:
      replicas: 1
      selector:
        app: pushgateway
        deploymentconfig: pushgateway
      template:
        metadata:
          labels:
            app: pushgateway
            deploymentconfig: pushgateway
        spec:
          containers:
            - command:
                - /bin/pushgateway
              name: pushgateway
              image: docker-registry.default.svc:5000/${NAMESPACE}/pushgateway:v1.2.0
              ports:
                - containerPort: 9091
                  protocol: TCP
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
      triggers:
        - type: ConfigChange

  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: prometheus-volume
      name: prometheus
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi

  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: prometheus
      name: prometheus
    spec:
      ports:
        - name: 9090-tcp
          port: 9090
          protocol: TCP
          targetPort: 9090
      selector:
        app: prometheus
        deploymentconfig: prometheus
      sessionAffinity: None
      type: ClusterIP

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: prometheus
      name: prometheus
    spec:
      replicas: 1
      selector:
        app: prometheus
        deploymentconfig: prometheus
      template:
        metadata:
          labels:
            app: prometheus
            deploymentconfig: prometheus
        spec:
          containers:
            - name: prometheus
              image: docker-registry.default.svc:5000/${NAMESPACE}/prometheus:v2.17.2
              ports:
                - containerPort: 9090
                  protocol: TCP
              volumeMounts:
                - mountPath: /prometheus
                  name: prometheus-volume
                - mountPath: /etc/prometheus/
                  name: prometheus-config
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          volumes:
            - name: prometheus-volume
              persistentVolumeClaim:
                claimName: prometheus
            - configMap:
                defaultMode: 420
                items:
                  - key: prometheus-config.yml
                    path: prometheus.yml
                  - key: alert-rules.yml
                    path: alert-rules.yml
                name: prometheus-config
              name: prometheus-config
      triggers:
        - type: ConfigChange

  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: grafana
      name: grafana
    spec:
      ports:
        - name: 3000-tcp
          port: 3000
          protocol: TCP
          targetPort: 3000
      selector:
        app: grafana
        deploymentconfig: grafana
      sessionAffinity: None
      type: ClusterIP

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: grafana
      name: grafana
    spec:
      replicas: 1
      selector:
        app: grafana
        deploymentconfig: grafana
      template:
        metadata:
          labels:
            app: grafana
            deploymentconfig: grafana
        spec:
          containers:
            - name: grafana
              image: docker-registry.default.svc:5000/${NAMESPACE}/grafana:6.7.3
              ports:
                - containerPort: 3000
                  protocol: TCP
              env:
                - name: "GF_SECURITY_ALLOW_EMBEDDING"
                  value: "true"
              volumeMounts:
                - mountPath: /var/lib/grafana
                  name: grafana-volume
                - mountPath: /etc/grafana/provisioning/datasources/
                  name: grafana-datasource
                - mountPath: /etc/grafana/provisioning/dashboards/
                  name: grafana-dashboard
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          volumes:
            - persistentVolumeClaim:
                claimName: grafana
              name: grafana-volume
            - configMap:
                defaultMode: 420
                items:
                  - key: grafana-datasource.yml
                    path: datasource.yml
                name: grafana-datasource
              name: grafana-datasource
            - configMap:
                defaultMode: 420
                items:
                  - key: grafana-dashboard.json
                    path: dashboard.json
                  - key: grafana-dashboard-config.yml
                    path: dashboard-config.yml
                name: grafana-dashboard
              name: grafana-dashboard
      triggers:
        - type: ConfigChange

  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: grafana
      name: grafana
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi

  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${IMAGE}
      name: ${IMAGE}

  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        build: ${IMAGE}
      name: ${IMAGE}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${IMAGE}:${IMAGE_TAG}
      source:
        type: Git
        git:
          ref: ${TESTSUITE_REPOSITORY_REF}
          uri: ${TESTSUITE_REPOSITORY_URL}
        contextDir: ${TESTSUITE_CONTEXT_DIR}
        sourceSecret:
          name: ${TESTSUITE_REPOSITORY_SECRET}
      strategy:
        type: Source
        sourceStrategy:
          from:
            kind: ${BUILDER_IMAGE_KIND}
            name: ${BUILDER_IMAGE}:${BUILDER_IMAGE_TAG}
          env:
            - name: "SAKULI_LICENSE_KEY"
              value: ${SAKULI_LICENSE_KEY}
      triggers:
        - imageChange: { }
          type: ImageChange
        - type: ConfigChange

  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${IMAGE}
      name: ${IMAGE}
    spec:
      ports:
        - name: 5901-tcp
          port: 5901
          protocol: TCP
          targetPort: 5901
        - name: 6901-tcp
          port: 6901
          protocol: TCP
          targetPort: 6901
      selector:
        app: ${IMAGE}
      sessionAffinity: None
      type: ClusterIP

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: dashboard
      labels:
        app: dashboard
    spec:
      replicas: 1
      selector:
        app: dashboard
      template:
        metadata:
          labels:
            app: dashboard
        spec:
          containers:
            - name: dashboard
              image: docker-registry.default.svc:5000/${NAMESPACE}/sakuli-dashboard:${IMAGE_TAG}
              ports:
                - containerPort: 8080
                  protocol: TCP
              env:
                - name: DASHBOARD_CONFIG
                  value: >-
                    {
                      "displays":[
                        {
                          "index":1,
                          "messages": {
                            "de": {
                              "description": "Test Ausf√ºhrung - VNC Ansicht",
                              "infoText": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet."
                            },
                            "en": {
                              "description": "Test Execution - VNC View",
                              "infoText": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet."
                            }
                          },
                          "url":"https://sakuli-dashboard-test-sakuli-dashboard-test.paas.consol.de?password=vncpassword&scale=local&view_only=true",
                          "actionIdentifier":"7890eab9-6c5e-4e40-b39c-163900ea4834"
                        },
                        {
                          "index":2,
                          "messages": {
                            "de": {
                              "description": "Dienst√ºberwachung"
                            },
                            "en": {
                              "description": "Service Monitoring"
                            }
                          },
                          "url":"https://grafana-sakuli-dashboard-test.paas.consol.de/d/A7K5C_cGz/circit-sakuli-poc?orgId=1&from=now-6h&to=now&theme=light&kiosk=tv"
                        }
                      ]
                    }
                - name: ACTION_CONFIG
                  value: >-
                    {
                       "actions":[
                          {
                             "actionIdentifier":"7890eab9-6c5e-4e40-b39c-163900ea4834",
                             "action": {
                                "metadata": {
                                  "labels": {
                                    "app": "${IMAGE}"
                                  },
                                  "name":"${IMAGE}"
                                },
                                "spec": {
                                  "volumes" : [
                                    {
                                      "name": "dshm",
                                      "emptyDir":
                                        {
                                        "medium": "Memory"
                                        }
                                    }
                                  ],
                                  "containers": [
                                    {
                                      "name": "${IMAGE}",
                                      "image": "docker-registry.default.svc:5000/${NAMESPACE}/${IMAGE}",
                                      "volumeMounts": [
                                        {
                                          "mountPath": "/dev/shm",
                                          "name": "dshm"
                                        }
                                      ],
                                      "env": [
                                        {
                                          "name": "VNC_VIEW_ONLY",
                                          "value": "true"
                                        },
                                        {
                                          "name": "SAKULI_ENCRYPTION_KEY",
                                          "valueFrom": {
                                            "secretKeyRef": {
                                              "name": "sakuli-encryption-key",
                                              "key": "key"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ],
                                  "restartPolicy": "Never"
                                }
                             }
                          }
                       ]
                    }
                - name: CLUSTER_CONFIG
                  value: >-
                    {
                      "cluster":{
                        "name":"${CLUSTER_NAME}",
                        "server":"${CLUSTER_SERVER}"
                      },
                      "user":{
                        "name":"${SERVICE_NAME}",
                        "token":"${LOGIN_TOKEN}"
                      },
                      "namespace":"${NAMESPACE}"
                    }
                - name: CRONJOB_CONFIG
                  value: >-
                    {
                      "schedule": "0 0 * * *",
                      "actionIdentifier": "7890eab9-6c5e-4e40-b39c-163900ea4834"
                    }
                - name: "SAKULI_LICENSE_KEY"
                  value: ${SAKULI_LICENSE_KEY}
      triggers:
        - type: ConfigChange

  - apiVersion: v1
    kind: Service
    metadata:
      name: dashboard
      labels:
        app: dashboard
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app: dashboard

  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: alertmanager
      name: alertmanager
    spec:
      ports:
        - name: 9093-tcp
          port: 9093
          protocol: TCP
          targetPort: 9093
      selector:
        app: alertmanager
        deploymentconfig: alertmanager
      sessionAffinity: None
      type: ClusterIP

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: alertmanager
      name: alertmanager
    spec:
      replicas: 1
      selector:
        app: alertmanager
        deploymentconfig: alertmanager
      template:
        metadata:
          labels:
            app: alertmanager
            deploymentconfig: alertmanager
        spec:
          containers:
            - name: alertmanager
              image: docker-registry.default.svc:5000/${NAMESPACE}/alertmanager:v0.21.0
              ports:
                - containerPort: 9093
                  protocol: TCP
              volumeMounts:
                - mountPath: /etc/alertmanager/
                  name: alertmanager-config
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          volumes:
            - configMap:
                defaultMode: 420
                items:
                  - key: alertmanager-config.yml
                    path: alertmanager.yml
                name: alertmanager-config
              name: alertmanager-config
      triggers:
        - type: ConfigChange